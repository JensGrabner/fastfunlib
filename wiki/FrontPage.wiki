A C library for fast multiprecision evaluation of transcendental functions, using fixed-point arithmetic directly on top of GMP/MPIR. The goal is to provide optimized base implementations of transcendental functions, with minimal overhead at low precision as well as asymptotic speed. It should be usable directly for computations that work well in fixed point (i.e. involving both inputs and outputs of order of magnitude close to unity), or as a base library for implementation of floating-point arithmetic with bells and whistles.

=Current status=

The current target is to test various algorithms, mainly for elementary functions. There is no code with a usable library interface yet. The svn trunk contains a test implementation of exp (the same code may also compute cos or sin).

The test program computes exp(0.37) and compares both accuracy and speed to MPFR-2.4.1. This implementation is uniformly faster than MPFR up to at least several hundred bits of precision on one AMD64 system. Accuracy is within 1-2 bits of the correctly rounded value (as computed by MPFR). Times (5th and 6th columns) are in nanoseconds.

{{{
fredrik@airy:~/src/fastfunlib/fastfunlib/exptest$ ./exptest
 prec   acc   J   r     mpfr     this   faster
   53    52   1   2     5070     1240   4.089
   66    65   1   6     5200     1390   3.741
   82    81   1   8     5590     1460   3.829
  102   101   1   6     5810     1670   3.479
  127   126   2   8     7170     2280   3.145
  158   157   2   7     8390     2500   3.356
  197   196   1  11     8610     3030   2.842
  246   246   1   7     9870     3900   2.531
  307   307   2  12    12260     4440   2.761
  383   381   3   9    12860     5220   2.464
  478   477   2  11    16260     6580   2.471
  597   596   2  14    19220     8039   2.391
  746   746   3  13    23400    10500   2.229
  932   931   3   8    27900    14100   1.979
 1165  1164   3  14    35400    18700   1.893
 1456  1455   3  14    48500    27000   1.796
 1820  1819   3  12    67000    38000   1.763
 2275  2274   4  11    93000    56500   1.646
 2843  2842   4  17   130500    84000   1.554
 3553  3553   5  14   190500   124000   1.536
 4441  4440   6  14   278000   187000   1.487
 5551  5550   6  17   400500   279500   1.433
 6938  6937   6  19   599000   429500   1.395
 8672  8670   7  18   891000   645000   1.381
10840 10839   7  25  1310000   973000   1.346
13550 13549   8  23  2024500  1472000   1.375
16937 16935   9  25  3121000  2299000   1.358
21171 21170   9  27  4647000  3446000   1.349
26463 26461   9  36  5335000  5209500   1.024
}}}

The J and r parameters are algorithmic tuning parameters. The test program performs an exhaustive search and reports the best combination. Eventually a program for pre-tuning will have to be written.

This is still a naive implementation and optimistically the speed at low precision could be improved by perhaps an additional factor two.

Initially exp, cosh/sinh, cos/sin, atan, zeta constants/Bernoulli numbers, gamma and digamma functions should be added; more functions may be added later on.