A C library for fast multiprecision evaluation of transcendental functions, using fixed-point arithmetic directly on top of GMP/MPIR. The goal is to provide optimized base implementations of transcendental functions, with minimal overhead at low precision as well as asymptotic speed. It should be usable directly for computations that work well in fixed point (i.e. involving both inputs and outputs of order of magnitude close to unity), or as a base library for implementation of floating-point arithmetic with bells and whistles.

=Current status=

The current target is to test various algorithms, mainly for elementary functions. There is no code with a usable library interface yet. The svn trunk contains a test implementation of exp (the same code may also compute cos or sin).

The test program computes exp(0.37) and compares both accuracy and speed to MPFR-2.4.1. Up to a precision of at least 3500 bits (1000 digits), this implementation is uniformly at least 3x faster than MPFR on one AMD64 system. Accuracy is within 1 bit of the correctly rounded value (as computed by MPFR). Times (5th and 6th columns) are in nanoseconds.

{{{
fredrik@airy:~/src/fastfunlib/fastfunlib/exptest$ ./exptest
 prec   acc   J   r     mpfr     this   faster
   53    52   0   8     7460     1400   5.329
   66    66   0   6    14840     1480   10.027
   82    82   0   8     5900     1620   3.642
  102   102   1   7     6140     1700   3.612
  127   127   1   6     8140     2400   3.392
  158   158   2   7    10120     2620   3.863
  197   197   1   7     9660     3080   3.136
  246   246   3   6    12080     3900   3.097
  307   306   2   7    15300     4650   3.290
  383   382   2  12    17500     5450   3.211
  478   477   3   9    21300     6750   3.156
  597   597   3   9    25000     8400   2.976
  746   745   2  12    48400    11000   4.400
  932   932   3   8    55600    14400   3.861
 1165  1165   3  12    71000    19200   3.698
 1456  1456   3  13   157000    27500   5.709
 1820  1819   3  12   203500    39500   5.152
 2275  2275   4  11   251500    57000   4.412
 2843  2842   4  19   326000    84000   3.881
 3553  3553   5  14   430500   124500   3.458
}}}

The J and r parameters are algorithmic tuning parameters. The test program performs an exhaustive search and reports the best combination. Eventually a program for pre-tuning will have to be written.

This is still a naive implementation and optimistically the speed could be improved by perhaps an additional factor two.

Initially exp, cosh/sinh, cos/sin, atan, zeta constants/Bernoulli numbers, gamma and digamma functions should be added; more functions may be added later on.